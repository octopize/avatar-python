SHELL := bash
.ONESHELL:
.SHELLFLAGS := -eu -o pipefail -c
.DELETE_ON_ERROR:
MAKEFLAGS += --warn-undefined-variables
MAKEFLAGS += --no-builtin-rules

export AVATAR_BASE_URL ?= http://localhost:8000
export AVATAR_USERNAME ?= user_integration
export AVATAR_PASSWORD ?= password_integration

install:  ## Install the stack
	poetry install --sync --no-ansi
	pre-commit install --hook-type commit-msg --hook-type pre-commit --hook-type pre-push
.PHONY: install

release-and-push: ## Prepare a new client release
	poetry run python release.py --bump-type patch
.PHONY: release-and-push

##@ Tests

test:  ## Run all the tests
	poetry run pytest --doctest-modules avatars
.PHONY: test

test-integration: ## Do a simple integration test
	poetry run python ./bin/markdowncode.py  doc/source/**.md | AVATAR_BASE_URL=$(AVATAR_BASE_URL) AVATAR_USERNAME=$(AVATAR_USERNAME) AVATAR_PASSWORD=$(AVATAR_PASSWORD) PYTHONPATH="avatars/" poetry run python --
.PHONY: test-integration

test-cov:
	poetry run pytest --doctest-modules avatars --cov=avatars --cov-report=html:htmlcov
	@echo "Coverage report written to ./.htmlcov/"
	python3 -m webbrowser -t "file://$(abspath htmlcov)/index.html"
.PHONY: test-cov

typecheck:  ## Run the type checker
	poetry run mypy avatars/ bin/ --show-error-codes --pretty
.PHONY: typecheck

lci: lint-fix ci ## Apply the whole integration pipeline
.PHONY: lci

ci: lint generate-py typecheck doc-build pip-requirements test test-integration pip-install-tutorial test-tutorial ## Run all checks
.PHONY: ci

lint-fix: ## Fix linting
	poetry run black avatars/ bin doc/source notebooks/ release.py
	poetry run blacken-docs doc/source/**.md
	poetry run isort avatars/ bin doc/source
	poetry run jupyter nbconvert --clear-output --ClearMetadataPreprocessor.enabled=True --inplace notebooks/*.ipynb
.PHONY: lint-fix

lint: ## Lint source files
	poetry run bandit -r avatars -c bandit.yaml
	poetry run flake8 .
.PHONY: lint


##@ Doc


DOC_OUTPUT_DIR ?= doc/build/html# will read from DOC_OUTPUT_DIR environment variable. Uses in github actions
DOC_SOURCE_DIR := doc/source

doc: doc-build  ## Build and open the docs
	current_branch=$$(git branch --show-current)
	python3 -m webbrowser -t $(DOC_OUTPUT_DIR)/$$current_branch/index.html
.PHONY: doc

doc-fast: ## Build and open the current version of the docs only
	current_branch=$$(git branch --show-current)
	poetry run sphinx-build -b html $(DOC_SOURCE_DIR) $(DOC_OUTPUT_DIR)/$$current_branch
	echo $(DOC_OUTPUT_DIR)/$$current_branch/index.html
	python3 -m webbrowser -t $(DOC_OUTPUT_DIR)/$$current_branch/index.html
.PHONY: doc-fast

doc-build:  ## Build the docs
##! This script is also used to deploy to production.
##! DO NOT modify this script without taking into account
##! the repercussions on the Github Actions script
	rm -rf $(DOC_OUTPUT_DIR)
	mkdir -p $(DOC_OUTPUT_DIR)
	poetry run pandoc --from=markdown --to=rst --output=$(DOC_SOURCE_DIR)/tutorial.rst doc/source/tutorial.md
	poetry run pandoc --from=markdown --to=rst --output=$(DOC_SOURCE_DIR)/user_guide.rst doc/source/user_guide.md
	poetry run pandoc --from=markdown --to=rst --output=$(DOC_SOURCE_DIR)/changelog.rst CHANGELOG.md
	$(MAKE) doc-build-pydantic-v1
	$(MAKE) doc-build-pydantic-v2
	poetry run python doc/bin/modify_class_name.py $(DOC_OUTPUT_DIR)
.PHONY: doc-build

doc-build-pydantic-v1:
	poetry remove pydantic autodoc-pydantic
	poetry add 'pydantic<2' 'autodoc-pydantic<2'
	git restore -- pyproject.toml poetry.lock # restoring straight after install makes sure that any errors during doc build will not leave them dirty
	# We whitelist no branches, as they will be built by the pydantic-v1 target
	poetry run sphinx-multiversion $(DOC_SOURCE_DIR) $(DOC_OUTPUT_DIR) -D 'smv_branch_whitelist=None'
.PHONY: doc-build-pydantic-v1

doc-build-pydantic-v2:
	poetry remove pydantic autodoc-pydantic
	poetry add 'pydantic>2' 'autodoc-pydantic>2'
	git restore -- pyproject.toml poetry.lock # restoring straight after install makes sure that any errors during doc build will not leave them dirty
	# The following regex disallows any value below 0.6.1 (generated by ChatGPT after many iterations)
	# See it live in action at https://regex101.com/r/cu3YJW/1
	poetry run sphinx-multiversion $(DOC_SOURCE_DIR) $(DOC_OUTPUT_DIR) -D 'smv_tag_whitelist=^(?!0\.6\.0)(0\.([6-9]\d*|[1-9]\d+)\.\d+|[1-9]\d*\.\d+\.\d+)$$'
.PHONY: doc-build-pydantic-v2

##@ Tutorial

TUTORIAL_REQUIREMENTS := requirements-tutorial.txt
export VENV_NAME := notebooks/env
export VENV_PATH := $(abspath $(VENV_NAME))


pip-requirements: ## Export the packages for the tutorials as a pip requirements.txt file
	poetry export -f requirements.txt -o  $(TUTORIAL_REQUIREMENTS) --with tutorial  --with main --without dev --without-hashes
.PHONY: pip-requirements


pip-install-tutorial: pip-requirements ## Install the dependecies of the tutorial via pip
	python3 -m venv $(VENV_NAME)
	"$(VENV_PATH)/bin/python3" -m pip install -r $(TUTORIAL_REQUIREMENTS)
	"$(VENV_PATH)/bin/python3" -m pip install .
.PHONY: pip-install-tutorial


notebook: pip-install-tutorial ## Start the tutorial notebooks
	PATH="file:///$(abspath $(VENV_NAME))/bin":$$PATH VIRTUAL_ENV="file:///$(abspath $(VENV_NAME))/bin" AVATAR_BASE_URL=$(AVATAR_BASE_URL) AVATAR_USERNAME=$(AVATAR_USERNAME) AVATAR_PASSWORD=$(AVATAR_PASSWORD) jupyter notebook notebooks
.PHONY: notebook


generate-py:  ## Generate .py files from notebooks
	poetry run jupytext notebooks/*.ipynb  --from ipynb --to py
	poetry run black notebooks/*.py
.PHONY: generate-py


test-tutorial: generate-py pip-install-tutorial ## Verify that all tutorials run without errors
	cd notebooks && \
	    find -s . \
	        -name Tutorial\*.py \
	        -exec $(VENV_PATH)/bin/python3 "{}" \;
.PHONY: test-tutorial


.DEFAULT_GOAL := help
help: Makefile
	@awk 'BEGIN {FS = ":.*##"; printf "Usage: make \033[36m<target>\033[0m\n"} /^[\/\.a-zA-Z1-9_-]+:.*?##/ { printf "  \033[36m%-10s\033[0m %s\n", $$1, $$2 } /^##@/ { printf "\n\033[1m%s\033[0m\n", substr($$0, 5) } ' $(MAKEFILE_LIST)
