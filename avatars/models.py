# This file has been generated - DO NOT MODIFY
# API Version : 0.5.13-4433091460dbc9f45d247c8ac55be163da6d4102


from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Dict, List, Optional, Protocol, Union, runtime_checkable
from uuid import UUID

import pandas as pd
from pydantic import BaseModel, ConfigDict, Field, RootModel
from typing_extensions import Annotated

# generated by datamodel-codegen:
#   filename:  input.json
#   timestamp: 2023-10-05T17:40:17+00:00


class AnalysisStatus(Enum):
    started = "started"
    done = "done"


class ClusterStats(BaseModel):
    n_active_tasks: Annotated[Optional[int], Field(title="N Active Tasks")] = None
    available_concurrency: Annotated[
        Optional[int], Field(title="Available Concurrency")
    ] = None
    utilization_rate_100: Annotated[
        Optional[int], Field(title="Utilization Rate 100")
    ] = None
    status_message: Annotated[Optional[str], Field(title="Status Message")] = ""


class ColumnStats(BaseModel):
    label: Annotated[str, Field(title="Label")]
    dtype: Annotated[str, Field(title="Dtype")]
    missing_number: Annotated[int, Field(title="Missing Number")]
    missing_proportion: Annotated[float, Field(title="Missing Proportion")]
    unique_number: Annotated[int, Field(title="Unique Number")]
    unique_proportion: Annotated[float, Field(title="Unique Proportion")]
    mean: Annotated[Optional[float], Field(title="Mean")] = None
    median: Annotated[Optional[float], Field(title="Median")] = None
    standard_deviation: Annotated[
        Optional[float], Field(title="Standard Deviation")
    ] = None
    mode: Annotated[Optional[Union[str, int, float]], Field(title="Mode")] = None
    is_skewed: Annotated[Optional[bool], Field(title="Is Skewed")] = None
    is_rare: Annotated[Optional[bool], Field(title="Is Rare")] = None


class ColumnType(Enum):
    int = "int"
    bool = "bool"
    category = "category"
    float = "float"
    datetime = "datetime"
    identifier = "identifier"


class CompatibilityResponse(BaseModel):
    message: Annotated[str, Field(title="Message")]
    most_recent_compatible_client: Annotated[
        Optional[str], Field(title="Most Recent Compatible Client")
    ] = None


class Contributions(BaseModel):
    data: Annotated[Dict[str, Dict[str, float]], Field(title="Data")]


class PasswordItem(RootModel[str]):
    root: Annotated[str, Field(max_length=128, min_length=12)]


class DatasetSummary(BaseModel):
    stats: Annotated[List[ColumnStats], Field(title="Stats")]
    probable_ids: Annotated[List[str], Field(title="Probable Ids")]


class ExcludeCategoricalMethod(Enum):
    """
    The method to exclude categorical column.

    There are several possible choices:

    - ``row_order``: **SENSITIVE** The excluded column will be linked to the original row order.
    This is a violation of privacy.

    - ``coordinate_similarity``: The excluded column will be linked by individual similarity.
    """

    row_order = "row_order"
    coordinate_similarity = "coordinate_similarity"


class ExplainedVariance(BaseModel):
    raw: Annotated[List[float], Field(title="Raw")]
    ratio: Annotated[List[float], Field(title="Ratio")]


class FPCAParameters(BaseModel):
    """
    Parameters of a FPCA projection.
    """

    nf: Annotated[
        int,
        Field(
            description="Number of degrees of freedom kept by the projection.",
            title="Nf",
        ),
    ]
    seed: Annotated[
        Optional[int],
        Field(
            description="The random seed. Used to set the randomness for reproducibility.",
            title="Seed",
        ),
    ] = None


class ForgottenPasswordRequest(BaseModel):
    email: Annotated[str, Field(title="Email")]


class GenericParameters(BaseModel):
    pass
    model_config = ConfigDict(
        extra="allow",
    )


class GenericResult(BaseModel):
    pass


class ImputeMethod(Enum):
    knn = "knn"
    mode = "mode"
    median = "median"
    mean = "mean"
    fast_knn = "fast_knn"


class JobKind(Enum):
    avatarization = "avatarization"
    privacy_metrics = "privacy_metrics"
    signal_metrics = "signal_metrics"
    avatarization_batch = "avatarization_batch"
    privacy_metrics_batch = "privacy_metrics_batch"
    signal_metrics_batch = "signal_metrics_batch"
    avatarization_with_time_series = "avatarization_with_time_series"
    privacy_metrics_with_time_series = "privacy_metrics_with_time_series"
    signal_metrics_with_time_series = "signal_metrics_with_time_series"


class JobProgress(BaseModel):
    completion_rate_100: Annotated[int, Field(title="Completion Rate 100")]
    name: Annotated[Optional[str], Field(title="Name")] = None
    created_at: Annotated[datetime, Field(title="Created At")]


class JobStatus(Enum):
    pending = "pending"
    started = "started"
    success = "success"
    failure = "failure"
    killed = "killed"
    unknown = "unknown"


class LoginResponse(BaseModel):
    access_token: Annotated[str, Field(title="Access Token")]
    token_type: Annotated[str, Field(title="Token Type")]


class PrivacyBatchDatasetMapping(BaseModel):
    original_id: Annotated[UUID, Field(title="Original Id")]
    unshuffled_avatars_id: Annotated[UUID, Field(title="Unshuffled Avatars Id")]


class ClosestRatePercentageThresholdItem(RootModel[float]):
    root: Annotated[float, Field(ge=0.0, le=100.0)]


class ClosestRateRatioThresholdItem(RootModel[float]):
    root: Annotated[float, Field(ge=0.0, le=1.0)]


class PrivacyMetricsTargets(BaseModel):
    hidden_rate: Annotated[str, Field(title="Hidden Rate")]
    local_cloaking: Annotated[str, Field(title="Local Cloaking")]
    distance_to_closest: Annotated[str, Field(title="Distance To Closest")]
    closest_distances_ratio: Annotated[str, Field(title="Closest Distances Ratio")]
    column_direct_match_protection: Annotated[
        str, Field(title="Column Direct Match Protection")
    ]
    categorical_hidden_rate: Annotated[str, Field(title="Categorical Hidden Rate")]
    row_direct_match_protection: Annotated[
        str, Field(title="Row Direct Match Protection")
    ]
    correlation_protection_rate: Annotated[
        str, Field(title="Correlation Protection Rate")
    ]
    inference_continuous: Annotated[str, Field(title="Inference Continuous")]
    inference_categorical: Annotated[str, Field(title="Inference Categorical")]
    closest_rate: Annotated[str, Field(title="Closest Rate")]


class PrivacyMetricsTimeSeriesParameters(BaseModel):
    dataset_id: Annotated[UUID, Field(title="Dataset Id")]
    unshuffled_avatar_dataset_id: Annotated[
        UUID, Field(title="Unshuffled Avatar Dataset Id")
    ]
    projection_parameters: Annotated[
        Optional[FPCAParameters],
        Field(description="Parameters of the time series projection."),
    ] = None


class Projections(BaseModel):
    records: Annotated[List[List[float]], Field(title="Records")]
    avatars: Annotated[List[List[float]], Field(title="Avatars")]


class RareCategoricalMethod(Enum):
    """
    The method to replace rare modalities.

    Available rare modality replacement strategies are:

    - ``most_similar``: Rare modalities will be replaced with the modality of the most similar
        records.

    - ``probabilistic``: Probabilities will be defined for each potential replacement value and
        the rare modalities will be replaced following these probabilities in a
        non-deterministic way.

    - ``missing``: Rare modalities will be replace with missing values.
    """

    most_similar = "most_similar"
    probabilistic = "probabilistic"
    missing = "missing"


class Report(BaseModel):
    id: Annotated[UUID, Field(title="Id")]
    user_id: Annotated[UUID, Field(title="User Id")]
    job_id: Annotated[UUID, Field(title="Job Id")]
    created_at: Annotated[Optional[datetime], Field(title="Created At")] = None
    download_url: Annotated[str, Field(title="Download Url")]


class ReportCreate(BaseModel):
    avatarization_job_id: Annotated[UUID, Field(title="Avatarization Job Id")]
    privacy_job_id: Annotated[UUID, Field(title="Privacy Job Id")]
    signal_job_id: Annotated[UUID, Field(title="Signal Job Id")]


class ReportFromBatchCreate(BaseModel):
    avatarization_batch_job_id: Annotated[
        UUID, Field(title="Avatarization Batch Job Id")
    ]
    privacy_batch_job_id: Annotated[UUID, Field(title="Privacy Batch Job Id")]
    signal_batch_job_id: Annotated[UUID, Field(title="Signal Batch Job Id")]


class ReportFromDataCreate(BaseModel):
    dataset_id: Annotated[UUID, Field(title="Dataset Id")]
    avatars_dataset_id: Annotated[UUID, Field(title="Avatars Dataset Id")]
    privacy_job_id: Annotated[UUID, Field(title="Privacy Job Id")]
    signal_job_id: Annotated[UUID, Field(title="Signal Job Id")]


class ResetPasswordRequest(BaseModel):
    email: Annotated[str, Field(title="Email")]
    new_password: Annotated[
        str, Field(max_length=128, min_length=12, title="New Password")
    ]
    new_password_repeated: Annotated[
        str, Field(max_length=128, min_length=12, title="New Password Repeated")
    ]
    token: Annotated[UUID, Field(title="Token")]


class SignalBatchDatasetMapping(BaseModel):
    original_id: Annotated[UUID, Field(title="Original Id")]
    avatars_id: Annotated[UUID, Field(title="Avatars Id")]


class SignalMetricsBaseParameters(BaseModel):
    seed: Annotated[Optional[int], Field(title="Seed")] = None


class SignalMetricsBatchParameters(BaseModel):
    """
    Parameters to configure a SignalMetricsBatchJob.

    There are two main use-cases:
        1. Launching a SignalMetricsBatchJob after an AvatarizationBatchJob
        2. Launching a SignalMetricsBatchJob without applying the avatar method

    1. Launching a SignalMetricsBatchJob after an AvatarizationBatchJob

    By specifying ``avatarization_batch_job_id``, we can gather all the necessary information
    from the database, namely which batches to pair together when computing the metrics.

    You can add parameters in ``common_parameters`` that will apply to the training
    batch as well as all the other batches.

    If you want to manually select which avatar batch get's paired with which original batch,
    you'll have to refer to use-case 2.

    >>> parameters = SignalMetricsBatchParameters(
    ...     avatarization_batch_job_id='c43c7cc7-9b66-4293-b88f-b5dbd07e1f95',
    ... )
    >>> parameters = SignalMetricsBatchParameters(
    ...     avatarization_batch_job_id='c43c7cc7-9b66-4293-b88f-b5dbd07e1f95',
    ...     common_parameters=SignalMetricsBaseParameters(seed=42),
    ... )

    2. Launching a SignalMetricsBatchJob without applying the avatar method

    If you want more control over which avatar batch get's paired with which original batch,
    or you want to compute metrics on datasets that did not have the avatar method applied
    to them, you can follow the steps laid out below.

    You'll have to split and upload the original and avatar data batches
    before launching the SignalMetricsBatchJob.

    Suppose you have the original training batch dataset as ``training_original_id``,
    the avatar training batch dataset as ``training_avatars_id``,
    as well as a list of all the other batch dataset identifiers as
    ``original_dataset_ids``, and ``avatars_dataset_ids``, and that all these have been uploaded
    to the server.

    You need to specify the training dataset identifiers that will be used to
    fit the anonymization. This can be done with ``training_dataset_mapping``.
    With ``batch_dataset_mappings`` you specify which avatar batch get's paired
    with which original batch. Both of these use instances of ``SignalBatchDatasetMapping``.

    ``common_parameters`` is where you'll add any parameters that you want the
    computation to use with an instance of ``SignalMetricsBaseParameters``.

    Because you haven't launched an ``AvatarizationBatchJob``, you set the
    ``avatarization_batch_job_id`` identifier to ``None``.

    >>> training_original_id = 'cf8e8dae-5d52-43b6-a6e6-be246ee35185'
    >>> training_avatars_id = 'e9dcdd58-24ea-4028-84df-778c0c1b5777'
    >>> original_dataset_ids = [
    ...     '00d332f6-4971-4589-8d12-0d14d2d929ee',
    ...     '65ac8062-d232-4c85-8beb-36c8235826ee',
    ... ]
    >>> avatars_dataset_ids = [
    ...     '2fd3d8cc-157b-4bc4-9a92-bc54f1a57cb9',
    ...     '97c1d3a0-0f63-424a-92ba-147c76a13c66',
    ... ]
    >>> batch_dataset_mappings = [
    ...     SignalBatchDatasetMapping(
    ...         avatars_id=avatars_dataset_id, original_id=original_dataset_id
    ...     )
    ...     for original_dataset_id, avatars_dataset_id in zip(
    ...         original_dataset_ids, avatars_dataset_ids
    ...     )
    ... ]
    >>> parameters = SignalMetricsBatchParameters(
    ...     avatarization_batch_job_id=None,
    ...     common_parameters=SignalMetricsBaseParameters(seed=42),
    ...     training_dataset_mapping=SignalBatchDatasetMapping(
    ...         avatars_id=training_avatars_id,
    ...         original_id=training_original_id,
    ...     ),
    ...     batch_dataset_mappings=batch_dataset_mappings
    ... )
    """

    model_config = ConfigDict(
        extra="allow",
    )
    avatarization_batch_job_id: Annotated[
        Optional[UUID],
        Field(
            description="Identifier of the avatarization batch job that was launched prior to this signal metrics batch job. This has to be set to None if you are computing signal metrics without applying the avatar method beforehand. Setting it to ``None`` requires ``training_dataset_mapping`` and ``batch_dataset_mappings`` to be set.",
            title="Avatarization Batch Job Id",
        ),
    ] = None
    training_dataset_mapping: Annotated[
        Optional[SignalBatchDatasetMapping],
        Field(
            description="Dataset identifiers for the training batch. The dataset identifiers specified here will be used to fit the anonymization."
        ),
    ] = None
    common_parameters: Annotated[
        Optional[SignalMetricsBaseParameters],
        Field(
            description="Parameters to use during the computation of the privacy metrics. These will be applied on all the batches, including the training batch."
        ),
    ] = None
    batch_dataset_mappings: Annotated[
        Optional[List[SignalBatchDatasetMapping]],
        Field(
            description="List of pairs of dataset identifiers. You should not specify again the dataset identifiers that were specified in ``training_dataset_mapping``.",
            title="Batch Dataset Mappings",
        ),
    ] = None


class SignalMetricsParameters(BaseModel):
    model_config = ConfigDict(
        extra="allow",
    )
    original_id: Annotated[UUID, Field(title="Original Id")]
    persistance_job_id: Annotated[
        Optional[UUID], Field(title="Persistance Job Id")
    ] = None
    avatarization_job_id: Annotated[
        Optional[UUID], Field(title="Avatarization Job Id")
    ] = None
    seed: Annotated[Optional[int], Field(title="Seed")] = None
    avatars_id: Annotated[UUID, Field(title="Avatars Id")]


class SignalMetricsTargets(BaseModel):
    hellinger_mean: Annotated[str, Field(title="Hellinger Mean")]
    correlation_difference_ratio: Annotated[
        str, Field(title="Correlation Difference Ratio")
    ]


class SignalMetricsTimeSeriesParameters(BaseModel):
    dataset_id: Annotated[UUID, Field(title="Dataset Id")]
    avatar_dataset_id: Annotated[UUID, Field(title="Avatar Dataset Id")]


class SignalMetricsWithTimeSeriesParameters(BaseModel):
    seed: Annotated[Optional[int], Field(title="Seed")] = None
    vanilla_original_id: Annotated[
        Optional[UUID],
        Field(
            description="Identifier of the original vanilla dataset.",
            title="Vanilla Original Id",
        ),
    ] = None
    vanilla_avatars_id: Annotated[
        Optional[UUID],
        Field(
            description="Identifier of the avatar vanilla dataset.",
            title="Vanilla Avatars Id",
        ),
    ] = None
    time_series: Annotated[
        List[SignalMetricsTimeSeriesParameters],
        Field(
            description="Privacy metrics parameters of the time series. Each time series can have a different set of parameters.",
            title="Time Series",
        ),
    ]


class TimeSeriesSignalMetricsPerDataset(BaseModel):
    pointwise_hellinger_mean: Annotated[float, Field(title="Pointwise Hellinger Mean")]
    pointwise_hellinger_std: Annotated[float, Field(title="Pointwise Hellinger Std")]
    density_hellinger_mean: Annotated[float, Field(title="Density Hellinger Mean")]
    density_hellinger_std: Annotated[float, Field(title="Density Hellinger Std")]
    original_id: Annotated[UUID, Field(title="Original Id")]
    avatars_id: Annotated[UUID, Field(title="Avatars Id")]


class UserRole(Enum):
    admin = "admin"
    user = "user"


class ValidationError(BaseModel):
    loc: Annotated[List[Union[str, int]], Field(title="Location")]
    msg: Annotated[str, Field(title="Message")]
    type: Annotated[str, Field(title="Error Type")]


class GrantTypeItem(RootModel[str]):
    root: Annotated[str, Field(pattern="password")]


class Login(BaseModel):
    grant_type: Annotated[Optional[GrantTypeItem], Field(title="Grant Type")] = None
    username: Annotated[str, Field(title="Username")]
    password: Annotated[str, Field(title="Password")]
    scope: Annotated[Optional[str], Field(title="Scope")] = ""
    client_id: Annotated[Optional[str], Field(title="Client Id")] = None
    client_secret: Annotated[Optional[str], Field(title="Client Secret")] = None


class CreateDataset(BaseModel):
    file: Annotated[bytes, Field(title="File")]


class GenericJob(BaseModel):
    id: Annotated[UUID, Field(title="Id")]
    kind: JobKind
    created_at: Annotated[datetime, Field(title="Created At")]
    status: JobStatus
    error_message: Annotated[Optional[str], Field(title="Error Message")] = None
    traceback: Annotated[Optional[str], Field(title="Traceback")] = None
    result: Optional[GenericResult] = None
    parameters: GenericParameters
    current_progress: Optional[JobProgress] = None


class AvatarizationTimeSeriesParameters(BaseModel):
    """
    Parameters for the anonymization of a Time Series.
    """

    model_config = ConfigDict(
        extra="allow",
    )
    dataset_id: Annotated[
        UUID,
        Field(
            description="Identifier of the dataset containing the time series.",
            title="Dataset Id",
        ),
    ]
    projection_parameters: Annotated[
        FPCAParameters, Field(description="Parameters of the time series projection.")
    ]
    seed: Annotated[Optional[int], Field(title="Seed")] = None


class ColumnDetail(BaseModel):
    type: ColumnType
    label: Annotated[str, Field(title="Label")]


class CreateUser(BaseModel):
    """
    Create a user, either with an email, or a username.

    The choice will depend on how your server is setup.
    """

    username: Annotated[Optional[str], Field(title="Username")] = None
    email: Annotated[Optional[str], Field(title="Email")] = None
    role: Optional[UserRole] = UserRole.user
    password: Annotated[Optional[PasswordItem], Field(title="Password")] = None


class Dataset(BaseModel):
    id: Annotated[UUID, Field(title="Id")]
    hash: Annotated[str, Field(title="Hash")]
    name: Annotated[Optional[str], Field(title="Name")] = None
    columns: Annotated[Optional[List[ColumnDetail]], Field(title="Columns")] = None
    download_url: Annotated[str, Field(title="Download Url")]
    analysis_status: Optional[AnalysisStatus] = None
    analysis_duration: Annotated[
        Optional[float], Field(title="Analysis Duration")
    ] = None
    nb_lines: Annotated[Optional[int], Field(title="Nb Lines")] = None
    nb_dimensions: Annotated[int, Field(title="Nb Dimensions")]
    summary: Optional[DatasetSummary] = None


class ExcludeCategoricalParameters(BaseModel):
    """
    Parameters to exclude some variables from the anonymization before re-assigning.

    The use of this parameter is recommended when the data contains categorical variables
    with a large number of modalities.
    """

    exclude_cardinality_threshold: Annotated[
        int,
        Field(
            description="Threshold defining the minimum cardinality of a variable to be excluded. Any categorical variable with a number of modalities greater or equal to this threshold will be excluded from the anonymization and re-assigned probabilistically.",
            ge=1,
            title="Exclude Cardinality Threshold",
        ),
    ]
    exclude_replacement_strategy: Annotated[
        ExcludeCategoricalMethod,
        Field(description="See :class:`ExcludeCategoricalMethod`."),
    ]
    rare_occurence_threshold: Annotated[
        int,
        Field(
            description="Maximum number of occurrences for a modality in an excluded variable to be considered as rare. Modalities considered as rare will be removed and replaced by other modalities prior to being re-assigned. This prevents the risk of re-identification based on rare modalities.",
            ge=0,
            title="Rare Occurence Threshold",
        ),
    ]
    rare_replacement_strategy: Annotated[
        Optional[RareCategoricalMethod],
        Field(description="See :class:`RareCategoricalMethod`."),
    ] = None
    number_reference_records: Annotated[
        Optional[int],
        Field(
            description="Number of training records to use to compute inter-records distances. Set to ``None`` to use all records, beware this may lead to long computational time. If ``number_reference_records`` is too low, it will be corrected to ensure each value combination to be replaced is represented in the sample. If ``number_reference_records`` is larger than the number of records, it will be corrected to the number of records.",
            title="Number Reference Records",
        ),
    ] = None


class HTTPValidationError(BaseModel):
    detail: Annotated[Optional[List[ValidationError]], Field(title="Detail")] = None


class ImputationParameters(BaseModel):
    method: Optional[ImputeMethod] = None
    k: Annotated[Optional[int], Field(title="K")] = None
    training_fraction: Annotated[
        Optional[float], Field(title="Training Fraction")
    ] = None


class PrivacyMetrics(BaseModel):
    hidden_rate: Annotated[float, Field(title="Hidden Rate")]
    local_cloaking: Annotated[float, Field(title="Local Cloaking")]
    distance_to_closest: Annotated[
        Optional[float], Field(title="Distance To Closest")
    ] = None
    closest_distances_ratio: Annotated[
        Optional[float], Field(title="Closest Distances Ratio")
    ] = None
    column_direct_match_protection: Annotated[
        float, Field(title="Column Direct Match Protection")
    ]
    categorical_hidden_rate: Annotated[float, Field(title="Categorical Hidden Rate")]
    row_direct_match_protection: Annotated[
        float, Field(title="Row Direct Match Protection")
    ]
    correlation_protection_rate: Annotated[
        Optional[float], Field(title="Correlation Protection Rate")
    ] = None
    inference_continuous: Annotated[
        Optional[float], Field(title="Inference Continuous")
    ] = None
    inference_categorical: Annotated[
        Optional[float], Field(title="Inference Categorical")
    ] = None
    closest_rate: Annotated[Optional[float], Field(title="Closest Rate")] = None
    targets: PrivacyMetricsTargets


class PrivacyMetricsBaseParameters(BaseModel):
    """
    Parameters to configure a PrivacyMetricsJob.
    """

    imputation: Annotated[
        Optional[ImputationParameters],
        Field(
            description="Imputation parameters used to preprocess avatars data for metrics computation."
        ),
    ] = None
    ncp: Annotated[
        Optional[int],
        Field(
            description="Number of components used for distance based metrics computation. Default behavior similar to avatarization. If unspecified, ncp is set to the minimum value between 5 and the number of variables after one hot encoding. Note: we recommend using to use the same ncp as during the avatarization to check the worst-case scenario.",
            title="Ncp",
        ),
    ] = None
    seed: Annotated[
        Optional[int],
        Field(
            description="The random seed. Used to set the randomness for reproducibility.",
            title="Seed",
        ),
    ] = None
    use_categorical_reduction: Annotated[
        Optional[bool],
        Field(
            description="Parameter to vectorize categorical variables using cat2vec. See :class:`AvatarizationParameters` for more details. Note: we recommend using the same parameter as during the avatarization.",
            title="Use Categorical Reduction",
        ),
    ] = None
    known_variables: Annotated[
        Optional[List[str]],
        Field(
            description="Variables considered to be known by the attacker. Used to measure some specific privacy metrics. Note: we recommend using demographic variables as they are the most likely to be known by an attacker.",
            title="Known Variables",
        ),
    ] = None
    target: Annotated[
        Optional[str],
        Field(
            description="The target variable to be inferred. Used to measure some specific privacy metrics. Must be used together with ``known_variables``. Note: we recommend using a sensitive variable",
            title="Target",
        ),
    ] = None
    closest_rate_percentage_threshold: Annotated[
        Optional[ClosestRatePercentageThresholdItem],
        Field(
            description="Threshold of closest original individuals to define a distance threshold. Any avatar data generated closer from an original than the distance threshold, is considered at risk.",
            title="Closest Rate Percentage Threshold",
        ),
    ] = None
    closest_rate_ratio_threshold: Annotated[
        Optional[ClosestRateRatioThresholdItem],
        Field(
            description="Closest distance ratio threshold below which an avatar data is considered too close to an original and too isolated from the rest to be safe.",
            title="Closest Rate Ratio Threshold",
        ),
    ] = None


class PrivacyMetricsBatchParameters(BaseModel):
    """
    Parameters to configure a PrivacyMetricsBatchJob.

    There are two main use-cases:
        1. Launching a PrivacyMetricsBatchJob after an AvatarizationBatchJob
        2. Launching a PrivacyMetricsBatchJob without applying the avatar method

    1. Launching a PrivacyMetricsBatchJob after an AvatarizationBatchJob

    By specifying ``avatarization_batch_job_id``, we can gather all the necessary information
    from the database, namely which batches to pair together when computing the metrics.

    You can add parameters in ``training_dataset_mapping`` that will apply to the training
    batch as well as all the other batches.

    If you want to manually select which avatar batch get's paired with which original batch,
    you'll have to refer to use-case 2.

    >>> parameters = PrivacyMetricsBatchParameters(
    ...     avatarization_batch_job_id='c43c7cc7-9b66-4293-b88f-b5dbd07e1f95',
    ... )
    >>> parameters = PrivacyMetricsBatchParameters(
    ...     avatarization_batch_job_id='c43c7cc7-9b66-4293-b88f-b5dbd07e1f95',
    ...     common_parameters=PrivacyMetricsBaseParameters(ncp=10),
    ... )

    2. Launching a PrivacyMetricsBatchJob without applying the avatar method

    If you want more control over which avatar batch get's paired with which original batch,
    or you want to compute metrics on datasets that did not have the avatar method applied
    to them, you can follow the steps laid out below.

    You'll have to split and upload the original and unshuffled avatar data batches
    before launching the PrivacyMetricsBatchJob.

    Suppose you have the original training batch dataset as ``training_original_id``,
    the unshuffled avatars training batch dataset as ``training_avatars_id``,
    as well as a list of all the other batch dataset identifiers as
    ``original_dataset_ids``, and ``avatars_dataset_ids``, and that all these have been uploaded
    to the server.

    You need to specify the training dataset identifiers that will be used to
    fit the anonymization.
    This can be done with ``training_dataset_mapping``.
    With ``batch_dataset_mappings`` you specify which avatar batch get's paired
    with which original batch. Both of these use instances of ``PrivacyBatchDatasetMapping``.

    ``common_parameters`` is where you'll add any parameters
    that you want the computation to use with an instance of ``PrivacyMetricsBaseParameters``.

    Because you haven't launched an ``AvatarizationBatchJob``, you have to set the
    ``avatarization_batch_job_id`` identifier to ``None``.

    >>> training_original_id = 'cf8e8dae-5d52-43b6-a6e6-be246ee35185'
    >>> training_avatars_id = 'e9dcdd58-24ea-4028-84df-778c0c1b5777'
    >>> original_dataset_ids = [
    ...     '00d332f6-4971-4589-8d12-0d14d2d929ee',
    ...     '65ac8062-d232-4c85-8beb-36c8235826ee',
    ... ]
    >>> avatars_dataset_ids = [
    ...     '2fd3d8cc-157b-4bc4-9a92-bc54f1a57cb9',
    ...     '97c1d3a0-0f63-424a-92ba-147c76a13c66',
    ... ]
    >>> batch_dataset_mappings = [
    ...     PrivacyBatchDatasetMapping(
    ...         unshuffled_avatars_id=avatars_dataset_id, original_id=original_dataset_id
    ...     )
    ...     for original_dataset_id, avatars_dataset_id in zip(
    ...         original_dataset_ids, avatars_dataset_ids
    ...     )
    ... ]
    >>> parameters = PrivacyMetricsBatchParameters(
    ...     avatarization_batch_job_id=None,
    ...     common_parameters=PrivacyMetricsBaseParameters(
    ...         ncp=10,
    ...     ),
    ...        training_dataset_mapping = PrivacyBatchDatasetMapping(
    ...         unshuffled_avatars_id=training_avatars_id,
    ...         original_id=training_original_id
    ...        ),
    ...     batch_dataset_mappings=batch_dataset_mappings
    ... )
    """

    model_config = ConfigDict(
        extra="allow",
    )
    avatarization_batch_job_id: Annotated[
        Optional[UUID],
        Field(
            description="Identifier of the avatarization batch job that was launched prior to this privacy metrics batch job. This has to be set to None if you are computing privacy metrics without applying the avatar method beforehand. Setting it to ``None`` requires ``training_dataset_mapping`` and ``batch_dataset_mappings`` to be set.",
            title="Avatarization Batch Job Id",
        ),
    ] = None
    training_dataset_mapping: Annotated[
        Optional[PrivacyBatchDatasetMapping],
        Field(
            description="Dataset identifiers for the training batch. The dataset identifiers specified here will be used to fit the anonymization."
        ),
    ] = None
    common_parameters: Annotated[
        Optional[PrivacyMetricsBaseParameters],
        Field(
            description="Parameters to use during the computation of the privacy metrics. These will be applied on all the batches, including the training batch."
        ),
    ] = None
    batch_dataset_mappings: Annotated[
        Optional[List[PrivacyBatchDatasetMapping]],
        Field(
            description="List of pairs of dataset identifiers. You should not specify again the dataset identifiers that were specified in ``training_dataset_mapping``.",
            title="Batch Dataset Mappings",
        ),
    ] = None


class PrivacyMetricsParameters(BaseModel):
    model_config = ConfigDict(
        extra="allow",
    )
    original_id: Annotated[UUID, Field(title="Original Id")]
    persistance_job_id: Annotated[
        Optional[UUID], Field(title="Persistance Job Id")
    ] = None
    avatarization_job_id: Annotated[
        Optional[UUID], Field(title="Avatarization Job Id")
    ] = None
    imputation: Annotated[
        Optional[ImputationParameters],
        Field(
            description="Imputation parameters used to preprocess avatars data for metrics computation."
        ),
    ] = None
    ncp: Annotated[
        Optional[int],
        Field(
            description="Number of components used for distance based metrics computation. Default behavior similar to avatarization. If unspecified, ncp is set to the minimum value between 5 and the number of variables after one hot encoding. Note: we recommend using to use the same ncp as during the avatarization to check the worst-case scenario.",
            title="Ncp",
        ),
    ] = None
    seed: Annotated[
        Optional[int],
        Field(
            description="The random seed. Used to set the randomness for reproducibility.",
            title="Seed",
        ),
    ] = None
    use_categorical_reduction: Annotated[
        Optional[bool],
        Field(
            description="Parameter to vectorize categorical variables using cat2vec. See :class:`AvatarizationParameters` for more details. Note: we recommend using the same parameter as during the avatarization.",
            title="Use Categorical Reduction",
        ),
    ] = None
    known_variables: Annotated[
        Optional[List[str]],
        Field(
            description="Variables considered to be known by the attacker. Used to measure some specific privacy metrics. Note: we recommend using demographic variables as they are the most likely to be known by an attacker.",
            title="Known Variables",
        ),
    ] = None
    target: Annotated[
        Optional[str],
        Field(
            description="The target variable to be inferred. Used to measure some specific privacy metrics. Must be used together with ``known_variables``. Note: we recommend using a sensitive variable",
            title="Target",
        ),
    ] = None
    closest_rate_percentage_threshold: Annotated[
        Optional[ClosestRatePercentageThresholdItem],
        Field(
            description="Threshold of closest original individuals to define a distance threshold. Any avatar data generated closer from an original than the distance threshold, is considered at risk.",
            title="Closest Rate Percentage Threshold",
        ),
    ] = None
    closest_rate_ratio_threshold: Annotated[
        Optional[ClosestRateRatioThresholdItem],
        Field(
            description="Closest distance ratio threshold below which an avatar data is considered too close to an original and too isolated from the rest to be safe.",
            title="Closest Rate Ratio Threshold",
        ),
    ] = None
    unshuffled_avatars_id: Annotated[UUID, Field(title="Unshuffled Avatars Id")]


class PrivacyMetricsPerBatchResult(BaseModel):
    hidden_rate: Annotated[float, Field(title="Hidden Rate")]
    local_cloaking: Annotated[float, Field(title="Local Cloaking")]
    distance_to_closest: Annotated[
        Optional[float], Field(title="Distance To Closest")
    ] = None
    closest_distances_ratio: Annotated[
        Optional[float], Field(title="Closest Distances Ratio")
    ] = None
    column_direct_match_protection: Annotated[
        float, Field(title="Column Direct Match Protection")
    ]
    categorical_hidden_rate: Annotated[float, Field(title="Categorical Hidden Rate")]
    row_direct_match_protection: Annotated[
        float, Field(title="Row Direct Match Protection")
    ]
    correlation_protection_rate: Annotated[
        Optional[float], Field(title="Correlation Protection Rate")
    ] = None
    inference_continuous: Annotated[
        Optional[float], Field(title="Inference Continuous")
    ] = None
    inference_categorical: Annotated[
        Optional[float], Field(title="Inference Categorical")
    ] = None
    closest_rate: Annotated[Optional[float], Field(title="Closest Rate")] = None
    targets: PrivacyMetricsTargets
    original_id: Annotated[UUID, Field(title="Original Id")]
    unshuffled_avatars_id: Annotated[UUID, Field(title="Unshuffled Avatars Id")]


class PrivacyMetricsPerDataset(BaseModel):
    hidden_rate: Annotated[float, Field(title="Hidden Rate")]
    local_cloaking: Annotated[float, Field(title="Local Cloaking")]
    distance_to_closest: Annotated[
        Optional[float], Field(title="Distance To Closest")
    ] = None
    closest_distances_ratio: Annotated[
        Optional[float], Field(title="Closest Distances Ratio")
    ] = None
    column_direct_match_protection: Annotated[
        float, Field(title="Column Direct Match Protection")
    ]
    categorical_hidden_rate: Annotated[float, Field(title="Categorical Hidden Rate")]
    row_direct_match_protection: Annotated[
        float, Field(title="Row Direct Match Protection")
    ]
    correlation_protection_rate: Annotated[
        Optional[float], Field(title="Correlation Protection Rate")
    ] = None
    inference_continuous: Annotated[
        Optional[float], Field(title="Inference Continuous")
    ] = None
    inference_categorical: Annotated[
        Optional[float], Field(title="Inference Categorical")
    ] = None
    closest_rate: Annotated[Optional[float], Field(title="Closest Rate")] = None
    targets: PrivacyMetricsTargets
    original_id: Annotated[UUID, Field(title="Original Id")]
    unshuffled_avatars_id: Annotated[UUID, Field(title="Unshuffled Avatars Id")]


class PrivacyMetricsWithTimeSeriesParameters(BaseModel):
    imputation: Annotated[
        Optional[ImputationParameters],
        Field(
            description="Imputation parameters used to preprocess avatars data for metrics computation."
        ),
    ] = None
    ncp: Annotated[
        Optional[int],
        Field(
            description="Number of components used for distance based metrics computation. Default behavior similar to avatarization. If unspecified, ncp is set to the minimum value between 5 and the number of variables after one hot encoding. Note: we recommend using to use the same ncp as during the avatarization to check the worst-case scenario.",
            title="Ncp",
        ),
    ] = None
    seed: Annotated[
        Optional[int],
        Field(
            description="The random seed. Used to set the randomness for reproducibility.",
            title="Seed",
        ),
    ] = None
    use_categorical_reduction: Annotated[
        Optional[bool],
        Field(
            description="Parameter to vectorize categorical variables using cat2vec. See :class:`AvatarizationParameters` for more details. Note: we recommend using the same parameter as during the avatarization.",
            title="Use Categorical Reduction",
        ),
    ] = None
    known_variables: Annotated[
        Optional[List[str]],
        Field(
            description="Variables considered to be known by the attacker. Used to measure some specific privacy metrics. Note: we recommend using demographic variables as they are the most likely to be known by an attacker.",
            title="Known Variables",
        ),
    ] = None
    target: Annotated[
        Optional[str],
        Field(
            description="The target variable to be inferred. Used to measure some specific privacy metrics. Must be used together with ``known_variables``. Note: we recommend using a sensitive variable",
            title="Target",
        ),
    ] = None
    closest_rate_percentage_threshold: Annotated[
        Optional[ClosestRatePercentageThresholdItem],
        Field(
            description="Threshold of closest original individuals to define a distance threshold. Any avatar data generated closer from an original than the distance threshold, is considered at risk.",
            title="Closest Rate Percentage Threshold",
        ),
    ] = None
    closest_rate_ratio_threshold: Annotated[
        Optional[ClosestRateRatioThresholdItem],
        Field(
            description="Closest distance ratio threshold below which an avatar data is considered too close to an original and too isolated from the rest to be safe.",
            title="Closest Rate Ratio Threshold",
        ),
    ] = None
    vanilla_original_id: Annotated[
        Optional[UUID],
        Field(
            description="Identifier of the original vanilla dataset.",
            title="Vanilla Original Id",
        ),
    ] = None
    vanilla_unshuffled_avatars_id: Annotated[
        Optional[UUID],
        Field(
            description="Identifier of the avatar vanilla dataset.",
            title="Vanilla Unshuffled Avatars Id",
        ),
    ] = None
    time_series: Annotated[
        List[PrivacyMetricsTimeSeriesParameters],
        Field(
            description="Privacy metrics parameters of the time series. Each time series can have a different set of parameters.",
            title="Time Series",
        ),
    ]


class SignalMetrics(BaseModel):
    hellinger_mean: Annotated[float, Field(title="Hellinger Mean")]
    hellinger_std: Annotated[float, Field(title="Hellinger Std")]
    correlation_difference_ratio: Annotated[
        Optional[float], Field(title="Correlation Difference Ratio")
    ] = None
    targets: SignalMetricsTargets


class SignalMetricsBatchJobCreate(BaseModel):
    kind: Optional[JobKind] = JobKind.signal_metrics_batch
    parameters: SignalMetricsBatchParameters


class SignalMetricsJobCreate(BaseModel):
    kind: Optional[JobKind] = JobKind.signal_metrics
    parameters: SignalMetricsParameters


class SignalMetricsPerBatchResult(BaseModel):
    hellinger_mean: Annotated[float, Field(title="Hellinger Mean")]
    hellinger_std: Annotated[float, Field(title="Hellinger Std")]
    correlation_difference_ratio: Annotated[
        Optional[float], Field(title="Correlation Difference Ratio")
    ] = None
    targets: SignalMetricsTargets
    original_id: Annotated[UUID, Field(title="Original Id")]
    avatars_id: Annotated[UUID, Field(title="Avatars Id")]


class SignalMetricsPerDataset(BaseModel):
    hellinger_mean: Annotated[float, Field(title="Hellinger Mean")]
    hellinger_std: Annotated[float, Field(title="Hellinger Std")]
    correlation_difference_ratio: Annotated[
        Optional[float], Field(title="Correlation Difference Ratio")
    ] = None
    targets: SignalMetricsTargets
    original_id: Annotated[UUID, Field(title="Original Id")]
    avatars_id: Annotated[UUID, Field(title="Avatars Id")]


class SignalMetricsWithTimeSeriesJobCreate(BaseModel):
    kind: Optional[JobKind] = JobKind.signal_metrics_with_time_series
    parameters: SignalMetricsWithTimeSeriesParameters


class User(BaseModel):
    id: Annotated[UUID, Field(title="Id")]
    organization_id: Annotated[UUID, Field(title="Organization Id")]
    username: Annotated[Optional[str], Field(title="Username")] = None
    email: Annotated[Optional[str], Field(title="Email")] = None
    role: Optional[UserRole] = UserRole.user
    max_allowed_dimensions_per_dataset: Annotated[
        Optional[int], Field(title="Max Allowed Dimensions Per Dataset")
    ] = None
    max_allowed_lines_per_dataset: Annotated[
        Optional[int], Field(title="Max Allowed Lines Per Dataset")
    ] = None


class PatchDataset(BaseModel):
    columns: Annotated[Optional[List[ColumnDetail]], Field(title="Columns")] = None


class PrivacyMetricsJob(BaseModel):
    id: Annotated[UUID, Field(title="Id")]
    kind: JobKind
    created_at: Annotated[datetime, Field(title="Created At")]
    status: JobStatus
    error_message: Annotated[Optional[str], Field(title="Error Message")] = None
    traceback: Annotated[Optional[str], Field(title="Traceback")] = None
    result: Optional[PrivacyMetrics] = None
    parameters: PrivacyMetricsParameters
    current_progress: Optional[JobProgress] = None


class SignalMetricsJob(BaseModel):
    id: Annotated[UUID, Field(title="Id")]
    kind: JobKind
    created_at: Annotated[datetime, Field(title="Created At")]
    status: JobStatus
    error_message: Annotated[Optional[str], Field(title="Error Message")] = None
    traceback: Annotated[Optional[str], Field(title="Traceback")] = None
    result: Optional[SignalMetrics] = None
    parameters: SignalMetricsParameters
    current_progress: Optional[JobProgress] = None


class AvatarizationBatchParameters(BaseModel):
    model_config = ConfigDict(
        extra="allow",
    )
    k: Annotated[int, Field(title="K")]
    column_weights: Annotated[
        Optional[Dict[str, float]], Field(title="Column Weights")
    ] = None
    ncp: Annotated[Optional[int], Field(title="Ncp")] = None
    seed: Annotated[Optional[int], Field(title="Seed")] = None
    imputation: Optional[ImputationParameters] = None
    use_categorical_reduction: Annotated[
        Optional[bool], Field(title="Use Categorical Reduction")
    ] = None
    to_categorical_threshold: Annotated[
        Optional[int], Field(title="To Categorical Threshold")
    ] = None
    exclude_categorical: Optional[ExcludeCategoricalParameters] = None
    training_dataset_id: Annotated[UUID, Field(title="Training Dataset Id")]
    dataset_ids: Annotated[List[UUID], Field(min_length=1, title="Dataset Ids")]


class AvatarizationParameters(BaseModel):
    model_config = ConfigDict(
        extra="allow",
    )
    k: Annotated[int, Field(title="K")]
    column_weights: Annotated[
        Optional[Dict[str, float]], Field(title="Column Weights")
    ] = None
    ncp: Annotated[Optional[int], Field(title="Ncp")] = None
    seed: Annotated[Optional[int], Field(title="Seed")] = None
    imputation: Optional[ImputationParameters] = None
    use_categorical_reduction: Annotated[
        Optional[bool], Field(title="Use Categorical Reduction")
    ] = None
    to_categorical_threshold: Annotated[
        Optional[int], Field(title="To Categorical Threshold")
    ] = None
    exclude_categorical: Optional[ExcludeCategoricalParameters] = None
    dataset_id: Annotated[Optional[UUID], Field(title="Dataset Id")] = None


class AvatarizationPerBatchResult(BaseModel):
    privacy_metrics: Optional[PrivacyMetrics] = None
    signal_metrics: Optional[SignalMetrics] = None
    avatars_dataset: Dataset
    sensitive_unshuffled_avatars_datasets: Dataset
    original_id: Annotated[UUID, Field(title="Original Id")]


class AvatarizationResult(BaseModel):
    privacy_metrics: Optional[PrivacyMetrics] = None
    signal_metrics: Optional[SignalMetrics] = None
    avatars_dataset: Dataset
    sensitive_unshuffled_avatars_datasets: Dataset


class AvatarizationResultPerDataset(BaseModel):
    privacy_metrics: Optional[PrivacyMetrics] = None
    signal_metrics: Optional[SignalMetrics] = None
    avatars_dataset: Dataset
    sensitive_unshuffled_avatars_datasets: Dataset
    original_id: Annotated[UUID, Field(title="Original Id")]


class AvatarizationWithTimeSeriesParameters(BaseModel):
    """
    Parameters to create an anonymization job with time series.
    """

    model_config = ConfigDict(
        extra="allow",
    )
    k: Annotated[int, Field(title="K")]
    column_weights: Annotated[
        Optional[Dict[str, float]], Field(title="Column Weights")
    ] = None
    ncp: Annotated[Optional[int], Field(title="Ncp")] = None
    seed: Annotated[Optional[int], Field(title="Seed")] = None
    imputation: Optional[ImputationParameters] = None
    use_categorical_reduction: Annotated[
        Optional[bool], Field(title="Use Categorical Reduction")
    ] = None
    to_categorical_threshold: Annotated[
        Optional[int], Field(title="To Categorical Threshold")
    ] = None
    exclude_categorical: Optional[ExcludeCategoricalParameters] = None
    vanilla_dataset_id: Annotated[
        Optional[UUID],
        Field(
            description="Dataset identifier of the vanilla data. ",
            title="Vanilla Dataset Id",
        ),
    ] = None
    time_series: Annotated[
        List[AvatarizationTimeSeriesParameters],
        Field(
            description="Parameters of the time series. Each time series can have a different set of parameters.",
            title="Time Series",
        ),
    ]


class AvatarizationWithTimeSeriesResult(BaseModel):
    datasets: Annotated[List[AvatarizationResultPerDataset], Field(title="Datasets")]


class MetaPrivacyMetrics(BaseModel):
    details: Annotated[List[PrivacyMetricsPerDataset], Field(title="Details")]


class MetaSignalMetrics(BaseModel):
    details: Annotated[
        List[Union[SignalMetricsPerDataset, TimeSeriesSignalMetricsPerDataset]],
        Field(title="Details"),
    ]


class PrivacyMetricsBatchJobCreate(BaseModel):
    kind: Optional[JobKind] = JobKind.privacy_metrics_batch
    parameters: PrivacyMetricsBatchParameters


class PrivacyMetricsBatchResult(BaseModel):
    worst_metrics: PrivacyMetrics
    mean_metrics: PrivacyMetrics
    training_metrics: PrivacyMetricsPerBatchResult
    batch_metrics: Annotated[
        List[PrivacyMetricsPerBatchResult], Field(title="Batch Metrics")
    ]


class PrivacyMetricsJobCreate(BaseModel):
    kind: Optional[JobKind] = JobKind.privacy_metrics
    parameters: PrivacyMetricsParameters


class PrivacyMetricsWithTimeSeriesJobCreate(BaseModel):
    kind: Optional[JobKind] = JobKind.privacy_metrics_with_time_series
    parameters: PrivacyMetricsWithTimeSeriesParameters


class SignalMetricsBatchResult(BaseModel):
    mean_metrics: SignalMetrics
    training_metrics: SignalMetricsPerBatchResult
    batch_metrics: Annotated[
        List[SignalMetricsPerBatchResult], Field(title="Batch Metrics")
    ]


class AvatarizationJob(BaseModel):
    id: Annotated[UUID, Field(title="Id")]
    kind: JobKind
    created_at: Annotated[datetime, Field(title="Created At")]
    status: JobStatus
    error_message: Annotated[Optional[str], Field(title="Error Message")] = None
    traceback: Annotated[Optional[str], Field(title="Traceback")] = None
    result: Optional[AvatarizationResult] = None
    parameters: AvatarizationParameters
    current_progress: Optional[JobProgress] = None


class AvatarizationWithTimeSeriesJob(BaseModel):
    id: Annotated[UUID, Field(title="Id")]
    kind: JobKind
    created_at: Annotated[datetime, Field(title="Created At")]
    status: JobStatus
    error_message: Annotated[Optional[str], Field(title="Error Message")] = None
    traceback: Annotated[Optional[str], Field(title="Traceback")] = None
    result: Optional[AvatarizationWithTimeSeriesResult] = None
    parameters: AvatarizationWithTimeSeriesParameters
    current_progress: Optional[JobProgress] = None


class PrivacyMetricsBatchJob(BaseModel):
    id: Annotated[UUID, Field(title="Id")]
    kind: JobKind
    created_at: Annotated[datetime, Field(title="Created At")]
    status: JobStatus
    error_message: Annotated[Optional[str], Field(title="Error Message")] = None
    traceback: Annotated[Optional[str], Field(title="Traceback")] = None
    result: Optional[PrivacyMetricsBatchResult] = None
    parameters: PrivacyMetricsBatchParameters
    current_progress: Optional[JobProgress] = None


class PrivacyMetricsWithTimeSeriesJob(BaseModel):
    id: Annotated[UUID, Field(title="Id")]
    kind: JobKind
    created_at: Annotated[datetime, Field(title="Created At")]
    status: JobStatus
    error_message: Annotated[Optional[str], Field(title="Error Message")] = None
    traceback: Annotated[Optional[str], Field(title="Traceback")] = None
    result: Optional[MetaPrivacyMetrics] = None
    parameters: PrivacyMetricsWithTimeSeriesParameters
    current_progress: Optional[JobProgress] = None


class SignalMetricsBatchJob(BaseModel):
    id: Annotated[UUID, Field(title="Id")]
    kind: JobKind
    created_at: Annotated[datetime, Field(title="Created At")]
    status: JobStatus
    error_message: Annotated[Optional[str], Field(title="Error Message")] = None
    traceback: Annotated[Optional[str], Field(title="Traceback")] = None
    result: Optional[SignalMetricsBatchResult] = None
    parameters: SignalMetricsBatchParameters
    current_progress: Optional[JobProgress] = None


class SignalMetricsWithTimeSeriesJob(BaseModel):
    id: Annotated[UUID, Field(title="Id")]
    kind: JobKind
    created_at: Annotated[datetime, Field(title="Created At")]
    status: JobStatus
    error_message: Annotated[Optional[str], Field(title="Error Message")] = None
    traceback: Annotated[Optional[str], Field(title="Traceback")] = None
    result: Optional[MetaSignalMetrics] = None
    parameters: SignalMetricsWithTimeSeriesParameters
    current_progress: Optional[JobProgress] = None


class AvatarizationBatchJobCreate(BaseModel):
    kind: Optional[JobKind] = JobKind.avatarization_batch
    parameters: AvatarizationBatchParameters


class AvatarizationBatchResult(BaseModel):
    privacy_metrics: Optional[PrivacyMetrics] = None
    signal_metrics: Optional[SignalMetrics] = None
    training_result: AvatarizationPerBatchResult
    batch_results: Annotated[
        List[AvatarizationPerBatchResult], Field(title="Batch Results")
    ]


class AvatarizationJobCreate(BaseModel):
    kind: Optional[JobKind] = JobKind.avatarization
    parameters: AvatarizationParameters


class AvatarizationWithTimeSeriesJobCreate(BaseModel):
    kind: Optional[JobKind] = JobKind.avatarization_with_time_series
    parameters: AvatarizationWithTimeSeriesParameters


class AvatarizationBatchJob(BaseModel):
    id: Annotated[UUID, Field(title="Id")]
    kind: JobKind
    created_at: Annotated[datetime, Field(title="Created At")]
    status: JobStatus
    error_message: Annotated[Optional[str], Field(title="Error Message")] = None
    traceback: Annotated[Optional[str], Field(title="Traceback")] = None
    result: Optional[AvatarizationBatchResult] = None
    parameters: AvatarizationBatchParameters
    current_progress: Optional[JobProgress] = None


@runtime_checkable
class Processor(Protocol):
    def preprocess(self, df: pd.DataFrame) -> pd.DataFrame:
        ...

    def postprocess(self, source: pd.DataFrame, dest: pd.DataFrame) -> pd.DataFrame:
        ...


class AvatarizationPipelineCreate(BaseModel):
    model_config = ConfigDict(arbitrary_types_allowed=True)

    avatarization_job_create: AvatarizationJobCreate
    processors: List[Processor] = []
    df: pd.DataFrame


class AvatarizationPipelineResult(BaseModel):
    model_config = ConfigDict(arbitrary_types_allowed=True)

    privacy_metrics: PrivacyMetrics
    signal_metrics: SignalMetrics
    post_processed_avatars: pd.DataFrame
    avatarization_job_id: UUID
    signal_job_id: UUID
    privacy_job_id: UUID
